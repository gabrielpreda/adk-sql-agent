from google.adk.tools.base_tool import BaseTool
from google.adk.tools.function_tool import FunctionTool
import ast
import logging
from typing import Optional
from langchain_community.utilities import SQLDatabase

logger = logging.getLogger(__name__)
db = SQLDatabase.from_uri("sqlite:///data/bookstore.sqlite")


def get_schema(input: Optional[dict] = None) -> dict:
    """
    Args:
        input (Optional[dict]): a dictionary containing a table name
    Returns:
        dict: schema description
    """

    if isinstance(input, dict):
        table_name = input.get("table")
        schema = db.get_table_info(table_name)
        logger.info(f"[SQL Tool] Schema (table) retrieved: {schema}")
    elif input is None:
        schema = db.get_table_info()
        logger.info(f"[SQL Tool] Schema retrieved: {schema}")
    else:
        # Input is in the wrong format, log and raise or return error
        logger.error(f"[SQL Tool] Invalid input for get_schema: {input}")
        return {"error": "Invalid input format. Expected a dict with 'table' key or None."}

    logger.info(f"[SQL Tool] Retrieved schema: {schema}")
    return {"schema_description": schema}



def run_sql_query(input: Optional[dict] = None) -> dict:
    """
    Args:
        input (dict): a dictionary with the sql query generated by the model
    Returns:
        The result of running the query
    """
    sql_query = input.get("query")
    
    logger.info(f"[SQL Tool] SQL Query: {sql_query}")

    try:
        result = db.run(sql_query)
        result = ast.literal_eval(result)

        logger.info(f"[SQL Tool] SQL Query result: {result}")

        return {"raw_result": result}
    except Exception as ex:
        return {"error": str(ex)}

get_schema_tool = FunctionTool(get_schema)
run_sql_query_tool = FunctionTool(run_sql_query)


