from google.adk.tools.base_tool import BaseTool
import ast
import logging
from langchain_community.utilities import SQLDatabase

db = SQLDatabase.from_uri("sqlite:///data/Chinook_Sqlite.sqlite")
logger = logging.getLogger(__name__)


class GetSchemaTool(BaseTool):
    """
    Tool for getting database schema
    """
    name = "get_schema_tool"
    description = "Gets the database schema"

    def run(self, input: dict = None) -> dict:
        """
        Args:
            input (dict|Optional): a dictionary containing a table name, 
            if we do not want to have the entire schema
        Returns:
            A schema description
        """
        if input:
            schema = db.get_table_info(input.get("table"))
        else:
            schema = db.get_table_info()
        
        logger.info(f"[SQL Tool] Retrieved schema: {schema}")

        return {"schema_description": schema}


class RunSQLQueryTool(BaseTool):
    name = "run_sql_query_tool"
    description = "Runs a SQL query and returns the result"

    def run(self, input: dict) -> dict:
        """
        Args:
            input (dict): a dictionary with the sql query generated by the model
        Returns:
            The result of running the query
        """
        sql_query = input.get("query")

        logger.info(f"[SQL Tool] Received query: {sql_query}")

        try:
            result = db.run(sql_query)
            result = ast.literal_eval(result)

            logger.info(f"[SQL Tool] SQL Query result: {result}")

            return {"raw_result": result}
        except Exception as ex:
            return {"error": str(ex)}
        
get_schema_tool = GetSchemaTool(
    name="get_schema_tool",
    description="Gets the database schema"
)

run_sql_query_tool = RunSQLQueryTool(
    name="run_sql_query_tool",
    description="Runs a SQL query and returns the result"
)